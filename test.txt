\ yaffa on adafruit samd51 itsybitsy m4 -- samsuanchen@gmail.com 201906201
\ https://learn.adafruit.com/introducing-adafruit-itsybitsy-m4/setup
\
\ A. save this script to flashRom
\ A.1. connect samD51 to PC
\ A.1.1. open Arduino IDE
\ A.1.2. select Tools/Board/Adafruit ItsyBitsy M4 (samD51)
\ A.1.3. select Tools/Port
\ A.1.4. select Sketch/Upload
\ A.2. open Tera Term
\ A.2.1. select Setup/Serial Port/ Port:
\ A.2.2. select Setup/Serial Port/ Baud rate:
\ A.2.3. select Setup/Serial Port/ OK
\ A.3. enter ": x eflmkdir ; x"
\ A.4. enter "download"
\ A.5. paste this script
\
\ B. append another script to flash
\ B.1. enter "download"
\ B.2. paste another script
\ B.3. enter "\end."
\
\ C. erase this script in flash
\ C.1. enter "remove"
\
vocabulary vocA vocabulary vocB
order
words
vocA definitions order
: a1 ; : a2 ;
words
vocB definitions order
: b1 ; : b2 ;
words
new definitions
decimal
cr .( 9 * 9 table )
: t \ ( -- ) show 9 * 9 table
  10 1 do cr 10 1 do i j * 3 .r loop loop ; t
 13 constant led
 14 constant buzzer
  9 constant BR \ red button right
 10 constant BD \ yellow button down
 11 constant BL \ green button left
 12 constant BU \ blue button up
: O \ ( pin -- ) set pinMode as OUTPUT
  1 swap pinMode ;
 led O buzzer O
: I \ ( pin -- ) set pinMode as INPUT
  2 swap pinMode ;
 BR I BD I BL I BU I
: H \ ( pin -- ) set pinLevel as HIGH
  1 swap pinWrite ;
: L \ ( pin -- ) set pinLevel as LOW
  0 swap pinWrite ;
: T \ ( pin -- ) toggle pinLevel
  1 over pinRead - swap pinWrite ;
cr .( 4 led toggles each 500 ms )
: X \ ( n pin -- ) n times toggle pinLevel
  swap over O 0 do dup T 500 delay loop drop ;
 4 led X
: y \ ( n -- ) check if n is zero
  if ." non-zero" else ." zero" then ;
: z \ ( n -- ) check if n is zero
  if ." non-" then ." zero" ;
: romWords \ ( -- ) show all words defined in rom
  nRomWords cr
  begin dup
  while dup .name space 1-
  repeat drop ;
: immediate? ( flag -- ) $80 and ;
: compile-only? ( flag -- ) $40 and ;
: smudge? ( flag -- ) $20 and ;
: entry>link ( ramWordEntry -- lfa ) ;
: entry>cfa ( ramWordEntry -- cfa ) cell+ @ ;
: nextCFA ( cfa -- cfa' | 0 )
  begin cell+ ( adr ) isUserEntry ( adr flg )
  until dup if entry>cfa then ;
: nRamWords ( -- n ) \ count ram words in all vocabularies
  0 ['] new
  begin ?dup
  while swap 1+ \ dup fgBrightYellow .
    swap \ dup .name fgWhite space
    nextCFA
  repeat ;
: voc> ( voc -- cfa ) cell- cell- ;
: body> ( pfa -- cfa ) cell- ;
: prevVoc ( voc -- voc' ) @ ;
: allWords \ ( -- ) show all wordnames (in decreasing order)
  lastVoc
  begin ?dup
  while dup voc> cr ." in vocabulary " dup fgBrightYellow .name fgWhite
    execute words prevVoc
  repeat cr ." in vocabulary primitive"
  primitive words ; \ allWords
: w. ( i -- ) fgBrightYellow base @ >r decimal ." W" 3 .0r fgWhite space
  r> base ! ;
: seeRomWords \ ( -- ) see all rom words (in ascending order)
  cr 0
  begin 1+ dup w. dup (see) dup nRomWords =
  until drop ;
: >entry ( cfa -- userEntry ) >name ?dup if 9 - then ;
: seeRamWords \ ( -- ) see all ram words (in ascending order)
  cr nRomWords ['] new
  begin ?dup
  while swap 1+ dup w. swap
    dup ['] new <>
    if dup >entry addrToSee <>
      if cr fgRed ." ram word Entry " . ." is not addrToSee " addrToSee . fgWhite
      then
    then
    dup (see) nextCFA
  repeat drop ;
: seeAll \ ( -- ) see all words (in ascending order)
  seeRomWords seeRamWords ;
cr .( hanoi tower )
: h ( a b c n -- )
  dup 1 =
  if ( a b c 1 ) drop nip swap emit emit exit
  then 1- ( a b c n-1 ) 3 pick 2 pick 4 pick 3 pick
  ( a b c n-1 a c b n-1 ) recurse
  ( a b c n-1 ) space 3 pick emit 1 pick emit space
  ( a b c n-1 ) 2swap swap 2swap
  ( b a c n-1 ) recurse ;
65 66 67 1 h
65 66 67 2 h
65 66 67 3 h
: tst 48 0
  do i 12 mod 0=
   if cr
   then 250 i cells freq + @ dup 4 .0r space
   14 tone 275 delay
  loop ; \ tst
cr .( printableChars )
: printableChars base @ hex $7f $21 cr
  do i 2 .0r space i emit space i $f and 0=
    if cr
    then
  loop base ! ; printableChars
variable keyNote
: getPFA r> r> r> r> drop cell+ -rot >r >r ;
: keyNote: create 1 allot , does> getPFA @ keyNote ! ;
220 keyNote: keyA
see keyNote
see keyNote:
see keyA
keyA
see keyNote
vocA definitions : a3 ; : a4 ;
vocB definitions : b3 ; : b4 ;
vocA words
vocB words
new definitions
: 1234567890123456789012345678901 ;
\end.
