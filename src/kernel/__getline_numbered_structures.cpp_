









































#define SPI_FlashROM_FILENAME "/forth/ascii_xfer_a001.txt" // LINE 43
#define SPI_FlashROM_TOPDIR   "/forth" // LINE 44














#include <Arduino.h> // LINE 59
#include "../../yaffa.h" // LINE 60

#ifdef EXT_KERN_GETLINE // LINE 63 - one _#_if
    #include "getline.h"

    #ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 66 - two _#_ifs are open

        #include <SPI.h>
        #include <Adafruit_SPIFlash.h>
        #include <Adafruit_SPIFlash_FatFs.h>

        #define FLASH_TYPE     SPIFLASHTYPE_W25Q16BV  // Flash chip type.

        #ifdef ADAFRUIT_METRO_M0_EXPRESS // LINE 73 - three _#_ifs are open
            #define FLASH_SS       SS1    // Flash chip SS pin.
        #endif // LINE 75 - two _#_ifs are open

        #ifdef ADAFRUIT_CIRCUITPLAYGROUND_M0
            #undef FLASH_SS // lets see if the clause, below, picks this up
        #endif // LINE 79 - two _#_ifs are open

        #ifdef ADAFRUIT_FEATHER_M0_EXPRESS // 15 Jan 2018
            #define FLASH_SS       SS1    // Flash chip SS pin.
        #else
            #ifndef FLASH_SS
                #define FLASH_SS     SS     // Flash chip SS pin for other boards UNPROVEN HERE - RESEARCH THIS
            #endif
        #endif // 15 Jan 2018 // LINE 87 - two _#_ifs are open UNLESS this comment is wrong. ;)





        #ifdef ADAFRUIT_METRO_M0_EXPRESS // LINE 94-bbb
            #define FLASH_SPI_PORT      SPI1      // What SPI port is Flash on?
        #endif

        #ifdef ADAFRUIT_CIRCUITPLAYGROUND_M0
            #undef FLASH_SPI_PORT // the fall-thru appliea to us
        #endif

        #ifdef ADAFRUIT_FEATHER_M0_EXPRESS      // 15 Jan 2018
            #define FLASH_SPI_PORT      SPI1      // What SPI port is Flash on?
        #else
            #ifndef FLASH_SPI_PORT
                #define FLASH_SPI_PORT     SPI      // other boards may require SPI rather than SPI1 here - RESEARCH THIS
            #endif
        #endif // 15 Jan 2018 // LINE 107










    #endif // POSSIBLY from: #ifdef HAS_SPI_FLASH_DEMO // from line 66 // now at LINE 118
           // only ONE _#_if is open now, from line 63 (ext_kern_getline)










    #ifdef HAS_SPI_FLASH_DEMO //               LINE 130 - two _#_ifs are open
void setup_spi_flash(void) {



















}
    #endif // 15 Jan 2018 // LINE 152 - one _#_if is still open










    #ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 163
File thisFile;
    #endif // 15 Jan 2018 // LINE 165 - one _#_if is still open

uint8_t getLine(char* ptr, uint8_t buffSize) { // LINE 167
  char inChar;




    #ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 173 - two _#_ifs are open
  if (spiFlashReading) {

      if (fatfs.exists(SPI_FlashROM_FILENAME)) {
          if (fileClosed) {






          }
      }
  } // if (spiFlashReading) {
    #endif // 15 Jan 2018 // LINE 187 - one _#_if_ remains open



  do { // LINE 191
    #ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 192 - two _#_ifs open, now
    if (spiFlashReading) {
        if (thisFile) {
            if (thisFile.available()) {
                // this is where every character of job.fs is read from SPI flash:
                inChar = thisFile.read();

                spiFlashWaiting = FALSE;
                if (thisFile.available()) {
                    spiFlashWaiting = TRUE;
                } else {
                    fileClosed = TRUE; // want to close the file - set a flag
                    spiFlashReading = FALSE; // shutdown the reading mechanism
                }
            }
        } // if (thisFile) {
// LINE 208 - blank
    } else { // LINE 209
    #endif // 15 Jan 2018 // LINE 210 - one _#_if_ remains open

        if (noInterpreter) {
            inChar = getKey();
            if (inChar == '\\') {

            }
        } else {
            inChar = getKey(); 
        }
    #ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 220 - two _#_ifs open, now
    }
    #endif // 15 Jan 2018 // LINE 222 - one _#_if_ remains open

    // inChar is now populated; either by keypress or by byte stored in SPI flash.

    if (inChar == ASCII_BS || inChar == ASCII_DEL) {  // new: was only ASCII_BS
       if (count) {
         *--ptr = 0;
         count--; // ainsuForth improvement -- backspace behavior


if (silentReading) { } else {
    if (flags & ECHO_ON) Serial.print("\b \b");
}



      }
    }
    else if (inChar == ASCII_TAB || inChar == ASCII_ESC) {


if (silentReading) { } else {
      if (flags & ECHO_ON) Serial.print("\a");
}




    }
    else if (inChar == ASCII_CR || inChar == ASCII_NL) { // ainsuForth improvement



















      if (silentReading) { // the 'load' word // LINE 271
      } else {
              if (flags & ECHO_ON) Serial.print(" "); // seems to want a space after 'dot' for example.
      } // LINE 274


















      if (spiFlashWaiting) { // LINE 293


      } else {  // LINE 296
          silentReading = FALSE; // we are interactive once more, when spiFlashWaiting changes state
      }

      break;

    } else { // LINE 302




      if (silentReading && spiFlashReading) { // the 'load' word // LINE 307
          int fakeSPxT = 0;
      } else {
          if (flags & ECHO_ON) {



if (silentReading) { // LINE 314
} else { // LINE 315
              // main forth interpreter typing echo is right here:
              Serial.print(inChar); // do NOT suppress this ordinarily, if ever. // LINE 317
} // LINE 318




          } // LINE 323
      }

      *ptr++ = inChar; // LINE 326
      *ptr = 0;
      count++;
    }
  } while (count < buffSize);
  return (count); // LINE 331
}
// LINE 333 blank
#endif // LINE 334 - no _#_ifs are open at all. ends: // #ifdef EXT_KERN_GETLINE // line 63
// the above _#_endif may be EXT_KERN_GETLINE  on LINE 63 - it's terminator. // LINE 335

#ifdef EXT_KERN_GETKEY // LINE 337 - one _#_if is open







char getKey(void) { // LINE 345
    char inChar;

    if (spiFlashReading) {
        if (inChar == ASCII_BS  ||
            inChar == ASCII_TAB ||
            inChar == ASCII_CR  ||  
            inChar == ASCII_NL  ||   // new
            inChar == ASCII_DEL ||   // new
            inChar == ASCII_ESC ||
            isprint(inChar)) {
            return inChar;
        }
    } else {
        while (1) {
            if (Serial.available()) {
                inChar = Serial.read();
                if (inChar == ASCII_BS  ||
                    inChar == ASCII_TAB ||
                    inChar == ASCII_CR  ||  
                    inChar == ASCII_NL  ||   // new
                    inChar == ASCII_DEL ||   // new
                    inChar == ASCII_ESC ||
                    isprint(inChar)) {
                    return inChar;
                }
            }
        }
    }
} // LINE 374

#endif // LINE 376 // #ifdef EXT_KERN_GETKEY - line 337 - zero _#_ifs open

// blank LINE 378





//  ---------------------------    ascii  transfer   --------------------------






























































// blank LINE 447
const char eflmkdir_str[] = "eflmkdir"; // forth vocabulary external flash mkdir

void _eflmkdir(void) { // LINE 450




#ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 455 - one _#_if is open




  if (!fatfs.exists(SPI_FlashROM_TOPDIR)) { // LINE 460
    Serial.println("/forth directory not found, creating...");


    if (!fatfs.mkdir(SPI_FlashROM_TOPDIR)) {
      Serial.println("Error, failed to create test directory!");
      while(1);
    }
    Serial.println("Created /forth directory!");
  }
#endif // LINE 470 - closes the only open _#_if remaining in the above code - zero _#_ifs open!




#ifdef NEVER_DEFINED_TEN_THREE // nonsense tag to prevent compile // LINE 475 - one _#_if is open
    #ifndef HAS_STANDARD_BUILD_HERE // LINE 476 - two _#_ifs are open

        #ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 478 - three _#_ifs are open now


  if (!fatfs.exists(SPI_FlashROM_TOPDIR)) {
    Serial.println("BAD ROBOT - fatfs.exists fails on line 473 June 17, 2018.");
  } else {
    Serial.println("local: assuming /forth directory already exists.");
  }
        #endif // 15 Jan 2018 // LINE 486 - two _#_ifs are still open

    #endif // LINE 488 - one _#_if remains open
#endif // LINE 489 - zero _#_ifs are open - all _#_ifs above this line are closed!
}


#ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 493 - a single _#_if is open, from this very line.
void remove_a_file(void) {
  Serial.print("file: Deleting ");
  Serial.print(SPI_FlashROM_FILENAME);
  Serial.println("...");

  if (!fatfs.remove(SPI_FlashROM_FILENAME)) {
      Serial.print("Error, file ");
      Serial.print(SPI_FlashROM_FILENAME);
      Serial.println(" was not removed!");
      while(1);
  }
  Serial.println("Deleted file!");

  File writeFile = fatfs.open(SPI_FlashROM_FILENAME, FILE_WRITE);

  if (!writeFile) {
      Serial.print("Error, failed to open ");
      Serial.print(SPI_FlashROM_FILENAME);
      Serial.println(" for writing!");
      while(1); // what does this do .. hold the program in a forever loop upon failure?
      Serial.println("Exiting forever loop of getline.cpp -- probably means a serious error occurred. LINE 408.");
  } else {
  Serial.println("An empty new file was created in its place.");
  Serial.println("This kludge will go away when multi-filename usage is more fully integrated.");
  writeFile.println(" ");

  writeFile.close(); // housekeeping.
  }
}
#endif // 15 Jan 2018 // LINE 523 - zero _#_ifs remain open.  All are closed!

#ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 525 - one _#_if is open, with this very line.
void write_a_capture_file(void) { // LINE 526













  File writeFile =               fatfs.open(SPI_FlashROM_FILENAME, FILE_WRITE); // LINE 540
  if (!writeFile) { // LINE 541
    Serial.print("Error, failed to open "); // LINE 542
    Serial.print(SPI_FlashROM_FILENAME);
    Serial.println(" for writing!");
    while(1);
  } // LINE 546








  writeFile.println(cpSource); // LINE 555


  writeFile.close(); // LINE 558

} // LINE 560
#endif // 15 Jan 2018 // LINE 561 - zero _#_ifs are open.  All are closed.


#ifndef HAS_STANDARD_BUILD_HERE // LINE 564 - this one _#_if is open; none above are open.

    #ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 566 - two _#_ifs are open, as of this line.
void read_a_test_file(void) { // LINE 567


  File readFile = fatfs.open(SPI_FlashROM_FILENAME, FILE_READ);
  if (!readFile) {


    Serial.print("Error, failed to open ");
    Serial.print(SPI_FlashROM_FILENAME);
    Serial.println(" for reading!");
    while(1);
  }




  String line = readFile.readStringUntil('\n'); // LINE 583

  Serial.print("First line of ");
  Serial.print(SPI_FlashROM_FILENAME);
  Serial.println(line);

  Serial.print("Ignore job.fs and say ");
  Serial.print(SPI_FlashROM_FILENAME);
  Serial.print(" here - several lines.");
  Serial.print("Total size of job.fs (bytes): "); Serial.println(readFile.size(), DEC);
  Serial.print("Current position in job.fs: "); Serial.println(readFile.position(), DEC);
  Serial.print("Available data to read in job.fs: "); Serial.println(readFile.available(), DEC);


  Serial.print("File name: "); Serial.println(readFile.name());
  Serial.print("Is file a directory? "); Serial.println(readFile.isDirectory() ? "Yes" : "No");



  if (!readFile.seek(0)) {
    Serial.println("Error, failed to seek back to start of file!");
    while(1);
  }



  Serial.println("Entire contents of job.fs:");
  while (readFile.available()) {
    char c = readFile.read();
    Serial.print(c);
  }


  readFile.close(); // LINE 616
}
    #endif // 15 Jan 2018 // LINE 618 - one _#_if still open
#endif // LINE 619 - zero _#_ifs remain open. All are closed!

#ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 621 - this one _#_if is open; none above are open.
// LINE 622 - blank

    #ifndef HAS_STANDARD_BUILD_HERE // LINE 624 - two _#_ifs are open, as of this line.
void read_from_code_py_file(void) { // LINE 625
  File readCodeFile = fatfs.open("/main.py", FILE_READ);
  if (!readCodeFile) {
    Serial.println("Error, failed to open code.py for reading!");
    while(1);
  }


  String line = readCodeFile.readStringUntil('\n');
  Serial.print("First line of code.py: "); Serial.println(line);


  Serial.print("Total size of code.py (bytes): "); Serial.println(readCodeFile.size(), DEC);
  Serial.print("Current position in code.py: "); Serial.println(readCodeFile.position(), DEC);
  Serial.print("Available data to read in code.py: "); Serial.println(readCodeFile.available(), DEC);


  Serial.print("File name: "); Serial.println(readCodeFile.name());
  Serial.print("Is file a directory? "); Serial.println(readCodeFile.isDirectory() ? "Yes" : "No");



  if (!readCodeFile.seek(0)) {
    Serial.println("Error, failed to seek back to start of file!");
    while(1);
  }



  Serial.println("Entire contents of code.py:");
  while (readCodeFile.available()) {
    char c = readCodeFile.read();
    Serial.print(c); // LINE 657
  } // LINE 658


  readCodeFile.close(); // LINE 661
}
    #endif // 15 Jan 2018 // LINE 663 - one _#_if remains open.
#endif // LINE 664 - zero _#_ifs are open, now.  All are closed.
// LINE 665

























#ifdef HAS_SPI_FLASH_DEMO // 15 Jan 2018 // LINE 691 - this one _#_if is open; none above are open.
void tail_code_bb(void) { // LINE 692


    #ifndef HAS_STANDARD_BUILD_HERE // LINE 695 - two _#_ifs are open, as of this line.
  File testDirRoot = fatfs.open("/"); // LINE 696
  if (!testDirRoot) {
    Serial.println("Error, failed to open root directory!");
    while(1);
  } else {
    Serial.println("Made it past the opening of the root directory.");
  }
    #endif // 15 Jan 2018 // LINE 703 - one _#_if remains open.

    #ifdef HAS_STANDARD_BUILD_HERE // LINE 705 - two _#_ifs are open, as of this line.
  File testDir = fatfs.open("/lib");
  if (!testDir) {
    Serial.println("Error, failed to open test directory!");
    while(1);
  } else {
    Serial.println("Made it past the opening of the /lib directory.");
  }
    #endif

    #ifndef HAS_STANDARD_BUILD_HERE
  if (!testDirRoot.isDirectory()) {
    Serial.println("Error, expected root to be a directory!");
    while(1);
  } else {
    Serial.println("Good - root is a directory - not a file.  Continue.");
  }
    #endif

    #ifdef HAS_STANDARD_BUILD_HERE
  if (!testDir.isDirectory()) {
    Serial.println("Error, expected /lib to be a directory!");
    while(1);
  } else {
    Serial.println("Good - /lib is a directory - not a file.  Continue.");
  }
    #endif

    #ifndef HAS_STANDARD_BUILD_HERE
  Serial.println("Listing children of root directory:");
  File child = testDirRoot.openNextFile();
  while (child) {

    Serial.print("- "); Serial.print(child.name());
    if (child.isDirectory()) {
      Serial.print(" (directory)");
    }
    Serial.println();




    child = testDirRoot.openNextFile();
  }




  testDirRoot.rewindDirectory();
    #endif



         while(1); Serial.println("WILL ROBINSON.");



    #ifdef HAS_STANDARD_BUILD_HERE
  Serial.println("Listing children of directory /lib:");
  File child = testDir.openNextFile();
  while (child) {

    Serial.print("- "); Serial.print(child.name());
    if (child.isDirectory()) {
      Serial.print(" (directory)");
    }
    Serial.println();




    child = testDir.openNextFile();
  }





  testDir.rewindDirectory();
    #endif



    #ifdef HAS_EXTRA_STANDARD_BUILD_HERE



  File test2File = fatfs.open("/forth/foo/test2.txt", FILE_WRITE);
  test2File.close();
  Serial.println("Deleting /forth/foo/test2.txt...");
  if (!fatfs.remove("/forth/foo/test2.txt")) {
    Serial.println("Error, couldn't delete test.txt file!");
    while(1);
  }
  Serial.println("Deleted file!");





  Serial.println("Deleting /test directory and everything inside it...");
  if (!fatfs.rmdir("/test")) {
    Serial.println("Error, couldn't delete test directory!");
    while(1);
  }

  if (fatfs.exists("/test")) {
    Serial.println("Error, test directory was not deleted!");
    while(1);
  }
  Serial.println("Test directory was deleted!"); // LINE 815
  
  Serial.println("Finished!");
    #endif

    #ifndef HAS_STANDARD_BUILD_HERE
    #endif

}
#endif // 15 Jan 2018

// LINE 862 blank - No more preprocessor directives to the end of the file.
































































void ascii_xfer_spi_flash_main(void) {




  read_from_code_py_file();  // LINE 896
  tail_code_bb(); // LINE 897

}





// LINE 905
// END.
