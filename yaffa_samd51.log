 Serial.begin(115200) buzzer pin A0 = 14
 Hello from setup_qspi m4 getline stuff.    Found QSPI Flash.
 NOV 2018: Mounted filesystem!
 SPI_FlashROM_FILENAME: /forth/ascii_xfer_a001.txt

 GIT 8c8141d2866
 SIWNA feature +trm4x +fm4x +crickitCPX
 time Sun Nov 4 02:32:24 2018 branch testing-gg-
 shred 4737-a3c-00d- target Trellis M4 Express
 forthSpace $200003DC size 0x8000

  YAFFA samd51Forth (239 romWords) - 201905 - samsuanchen@gmail.com
 ok
vocabulary A vocabulary B  OK

order
 current new  context new new primitive  OK

words
B A new  OK

A definitions order
 current A  context A new primitive  OK

: a1 ; : a2 ;  OK

words
a2 a1  OK

B definitions  OK

order
 current B  context B new primitive  OK

: b1 ; : b2 ;  OK

words
b2 b1  OK

new definitions  OK

order
 current new  context new new primitive  OK

load  OK

   OK

\ yaffa on adafruit samd51 itsybitsy m4 -- samsuanchen@gmail.com 201906201  OK

\ https://learn.adafruit.com/introducing-adafruit-itsybitsy-m4/setup  OK

\  OK

\ A. save this script to flashRom  OK

\ A.1. connect samD51 to PC  OK

\ A.1.1. open Arduino IDE  OK

\ A.1.2. select Tools/Board/Adafruit ItsyBitsy M4 (samD51)  OK

\ A.1.3. select Tools/Port  OK

\ A.1.4. select Sketch/Upload  OK

\ A.2. open Tera Term  OK

\ A.2.1. select Setup/Serial Port/ Port:  OK

\ A.2.2. select Setup/Serial Port/ Baud rate:  OK

\ A.2.3. select Setup/Serial Port/ OK  OK

\ A.3. enter ": x eflmkdir ; x"  OK

\ A.4. enter "download"  OK

\ A.5. paste this script  OK

\  OK

\ B. append another script to flash  OK

\ B.1. enter "download"  OK

\ B.2. paste another script  OK

\ B.3. enter "\end."  OK

\  OK

\ C. erase this script in flash  OK

\ C.1. enter "remove"  OK

decimal  OK

: .r ( n m -- ) >r 0 <# #s #> r> over - 0 over <
  if spaces
  else drop
  then type ;  OK

: .0r ( n m -- ) >r 0 <# #s #> r> over - 0 over <
  if 0
    do 48 emit
    loop
  else drop
  then type ;  OK

cr .( 9 * 9 table )
9 * 9 table  OK

: t \ ( -- ) show 9 * 9 table
  10 1 do cr 10 1 do i j * 3 .r loop loop ; t
  1  2  3  4  5  6  7  8  9
  2  4  6  8 10 12 14 16 18
  3  6  9 12 15 18 21 24 27
  4  8 12 16 20 24 28 32 36
  5 10 15 20 25 30 35 40 45
  6 12 18 24 30 36 42 48 54
  7 14 21 28 35 42 49 56 63
  8 16 24 32 40 48 56 64 72
  9 18 27 36 45 54 63 72 81 OK

 13 constant led  OK

 14 constant buzzer  OK

  9 constant BR \ red button right  OK

 10 constant BD \ yellow button down  OK

 11 constant BL \ green button left  OK

 12 constant BU \ blue button up  OK

: O \ ( pin -- ) set pinMode as OUTPUT
  1 swap pinMode ;  OK

 led O buzzer O  OK

: I \ ( pin -- ) set pinMode as INPUT
  2 swap pinMode ;  OK

 BR I BD I BL I BU I  OK

: H \ ( pin -- ) set pinLevel as HIGH
  1 swap pinWrite ;  OK

: L \ ( pin -- ) set pinLevel as LOW
  0 swap pinWrite ;  OK

: T \ ( pin -- ) toggle pinLevel
  1 over pinRead - swap pinWrite ;  OK

cr .( 4 led toggles each 500 ms )
4 led toggles each 500 ms  OK

: X \ ( n pin -- ) n times toggle pinLevel
  swap over O 0 do dup T 500 delay loop drop ;  OK

 4 led X  OK

: y \ ( n -- ) check if n is zero
  if ." non-zero" else ." zero" then ;  OK

: z \ ( n -- ) check if n is zero
  if ." non-" then ." zero" ;  OK

: countRomWords ( -- n ) 0
  begin 1+ dup romEntry @ 0=
  until ;  OK

: romWords \ ( -- ) show all words defined in rom
  countRomWords
  begin dup
  while dup .name space 1-
  repeat drop ;  OK

: immediate? ( flag -- ) $80 and ;  OK

: compile-only? ( flag -- ) $40 and ;  OK

: smudge? ( flag -- ) $20 and ;  OK

: entry>link ( ramWordEntry -- lfa ) ;  OK

: entry>cfa ( ramWordEntry -- cfa ) cell+ @ ;  OK

: countRamWords ( -- n ) 0 ramLast
  begin dup
  while swap 1+ swap entry>link @
  repeat drop ;  OK

: ramWords \ ( -- ) show all ram wordnames (in decreasing order)
  lastVoc
  begin ?dup
  while dup 8 - cr ." vocabulary " .name cr dup cell- @
    begin ?dup
    while dup entry>cfa .name space entry>link @
repeat @
  repeat ;  OK

: allWords \ ( -- ) show all wordnames (in decreasing order)
  cr ramWords romWords ; \ words  OK

: w. ( i -- ) base @ >r decimal ." W" 3 .0r space r> base ! ;  OK

: seeRamWords \ ( -- ) see all ram words (in decreasing order)
  countRomWords countRamWords + ramLast
  begin dup
  while swap dup w. 1- swap dup entry>cfa (see) entry>link @
  repeat 2drop ;  OK

: seeRomWords \ ( -- ) see all rom words (in decreasing order)
  countRomWords
  begin dup
  while dup w. dup (see) 1-
  repeat drop ;  OK

: seeAll \ ( -- ) see all words (in decreasing order)
  cr seeRamWords seeRomWords ; \ seeAllremove  OK

: ww \ ( -- ) show all wordnames (in ascending order)
  cr
  \ for each rom words
  0
  begin 1+ ( iRomWord+1 ) dup romEntry @
  while ( iRomWord+1 ) dup w. dup .name space
  repeat ( nRomWords )
  \ for each ram words
  ramFirst
  begin ( iWord ramEntry ) ?dup
  while over w. dup entry>cfa .name space
    swap 1+ swap nextRamEntry
  repeat ( nWords ) drop ; \ www  OK

: ss \ ( -- ) see all words (in ascending order)
  cr
  \ for each rom words
  0
  begin 1+ ( iRomWord+1 ) dup romEntry @
  while ( iRomWord+1 ) dup w. dup (see)
  repeat ( nRomWords )
  \ for each ram words
  ramFirst
  begin ( iWord ramEntry ) ?dup
  while over w. dup entry>cfa (see)
    swap 1+ swap nextRamEntry
  repeat ( nWords ) drop ; \ ss  OK

cr .( hanoi tower )
hanoi tower  OK

: h ( a b c n -- )
  dup 1 =
  if ( a b c 1 ) drop nip swap emit emit exit
  then 1- ( a b c n-1 ) 3 pick 2 pick 4 pick 3 pick
  ( a b c n-1 a c b n-1 ) recurse
  ( a b c n-1 ) space 3 pick emit 1 pick emit space
  ( a b c n-1 ) 2swap swap 2swap
  ( b a c n-1 ) recurse ;  OK

65 66 67 1 h AC OK

65 66 67 2 h AB AC BC OK

65 66 67 3 h AC AB CB AC BA BC AC OK

: tst 48 0
  do i 12 mod 0=
   if cr
   then 250 i cells freq + @ dup 4 .0r space
   14 tone 275 delay
  loop ; \ tst  OK

cr .( printableChars )
printableChars  OK

: printableChars base @ hex $7f $21 cr
  do i 2 .0r space i emit space i $f and 0=
    if cr
    then
  loop base ! ; printableChars
21 ! 22 " 23 # 24 $ 25 % 26 & 27 ' 28 ( 29 ) 2a * 2b + 2c , 2d - 2e . 2f / 30 0
31 1 32 2 33 3 34 4 35 5 36 6 37 7 38 8 39 9 3a : 3b ; 3c < 3d = 3e > 3f ? 40 @
41 A 42 B 43 C 44 D 45 E 46 F 47 G 48 H 49 I 4a J 4b K 4c L 4d M 4e N 4f O 50 P
51 Q 52 R 53 S 54 T 55 U 56 V 57 W 58 X 59 Y 5a Z 5b [ 5c \ 5d ] 5e ^ 5f _ 60 `
61 a 62 b 63 c 64 d 65 e 66 f 67 g 68 h 69 i 6a j 6b k 6c l 6d m 6e n 6f o 70 p
71 q 72 r 73 s 74 t 75 u 76 v 77 w 78 x 79 y 7a z 7b { 7c | 7d } 7e ~  OK

variable keyNote  OK

: getPFA r> r> r> r> drop cell+ -rot >r >r ;  OK

: keyNote: create 1 allot , does> getPFA @ keyNote ! ;  OK

220 keyNote: A  OK

see keyNote
 HighLevel Ram Word keyNote (xt $20000d60)
 HEAD
 20000d4c 20000cc0 link
 20000d50 20000d60 cfa
 20000d54 79656b00 name, flag
 20000d58 65746f4e
 20000d5c 00000000
 CODE
 20000d60 0000000f (var)
 BODY
 20000d64 00000000
 OK

see keyNote:
 HighLevel Ram Word keyNote: (xt $20000db4)
 HEAD
 20000da0 20000d68 link
 20000da4 20000db4 cfa
 20000da8 79656b00 name, flag
 20000dac 65746f4e
 20000db0 0000003a
 CODE
 20000db4 00000062 create
 20000db8 00000030 1
 20000dbc 0000004e allot
 20000dc0 00000029 ,
 20000dc4 00000006 (does>)
 20000dc8 20000d78 getPFA
 20000dcc 0000004a @
 20000dd0 20000d60 keyNote
 20000dd4 0000001f !
 20000dd8 00000001 exit
 OK

see A
 HighLevel Ram Word A (xt $20000de8)
 HEAD
 20000ddc 20000da0 link
 20000de0 20000de8 cfa
 20000de4 00004100 name, flag
 CODE
 20000de8 20000dc8 (does> keyNote:)
 BODY
 20000df0 000000dc
 OK

A  OK

see keyNote
 HighLevel Ram Word keyNote (xt $20000d60)
 HEAD
 20000d4c 20000cc0 link
 20000d50 20000d60 cfa
 20000d54 79656b00 name, flag
 20000d58 65746f4e
 20000d5c 00000000
 CODE
 20000d60 0000000f (var)
 BODY
 20000d64 000000dc
 OK

order
 current new  context new new primitive  OK

words
A keyNote: getPFA keyNote printableChars tst h ss ww seeAll seeRomWords
seeRamWords w. allWords ramWords countRamWords entry>cfa entry>link smudge?
compile-only? immediate? romWords countRomWords z y X T L H I O BU BL BD
BR buzzer led t .0r .r B A new  OK

ramWords
vocabulary B
b2 b1
vocabulary A
a2 a1
vocabulary new
A keyNote: getPFA keyNote printableChars tst h ss ww seeAll seeRomWords seeRamWords w. allWords ramWords countRamWords entry>cfa entry>link smudge? compile-only? immediate? romWords countRomWords z y X T L H I O BU BL BD BR buzzer led t .0r .r B A new  OK

primitive words
 primitive order previous also lastVoc vocs definitions current context
bgBrightWhite bgBrightCyan bgBrightMagenta bgBrightBlue bgBrightYellow
bgBrightGreen bgBrightRed bgBrightBlack bgWhite bgCyan bgMagenta bgBlue
bgYellow bgGreen bgRed bgBlack fgBrightWhite fgBrightCyan fgBrightMagenta
fgBrightBlue fgBrightYellow fgBrightGreen fgBrightRed fgBrightBlack fgWhite
fgCyan fgMagenta fgBlue fgYellow fgGreen fgRed fgBlack bgBlue fgYellow
setEscPrint isWord freq noTone tone download remove echo! load eflmkdir
>name analogWrite analogRead pinRead pinMode pinWrite delay .name nextRamEntry
isRamEntry ramLast ramFirst romEntry words see (see) dump .s who help endcase
endof of case hex <> 2r@ 2r> 2>r 0> 0<> .( ] [char] ['] [ xor \ word while
until u. then swap spaces space source rshift -rot rot repeat recurse r@
r> quit postpone pick or nip negate move mod min max m* lshift loop leave
j invert compile-only immediate if i hold here fm/mod find fill execute
emit else dup does> do depth decimal create cr count again strlen constant
chars char+ char cell/ cells cell- cell+ c@ c, c! bl begin base and allot
accept abs abort" @ ?dup >r >number >in >body > <# < ; : 2swap 2over 2dup
2drop 2@ 2/ 2! 2* 2- 2+ 1- 1+ 4 3 2 1 0 false true 0< /mod / , +loop +!
*/mod */ ( ' #s #> # ! abort 0= * + - . print warm vocabulary (voc) variable
(con) drop = over (var) ." s" evaluate (+loop) (leave) (loop) (do) throw
(does>) zbran bran type literal exit  OK

vocs
B A new primitive OK

A definitions : a3 ; B definitions : b3 ; 當機!!!